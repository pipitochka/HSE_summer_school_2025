/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.audiotour.api;

import com.audiotour.dto.AudioTourCreate;
import com.audiotour.dto.AudioTourDetails;
import com.audiotour.dto.AudioTourDto;
import com.audiotour.dto.AudioTourUpdate;
import com.audiotour.dto.InstitutionCreate;
import com.audiotour.dto.InstitutionDto;
import com.audiotour.dto.MyError;
import com.audiotour.dto.PaginatedAudioTours;
import com.audiotour.dto.PaginatedInstitutions;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-07-10T12:35:57.113105+03:00[Europe/Moscow]")
@Validated
@Tag(name = "Audio Tours", description = "Управление аудиоэкскурсиями")
public interface InstitutionsApi {

    /**
     * POST /institutions/{institution_id}/audio-tours : Создать новую аудиоэкскурсию для учреждения
     * Создает новую аудиоэкскурсию, которая будет принадлежать указанному учреждению.
     *
     * @param institutionId  (required)
     * @param audioTourCreate  (required)
     * @return Экскурсия успешно создана. (status code 201)
     *         or Доступ запрещен. (status code 403)
     */
    @Operation(
        operationId = "createAudioTourForInstitution",
        summary = "Создать новую аудиоэкскурсию для учреждения",
        description = "Создает новую аудиоэкскурсию, которая будет принадлежать указанному учреждению.",
        tags = { "Audio Tours" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Экскурсия успешно создана.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AudioTourDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = AudioTourDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MyError.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = MyError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/institutions/{institution_id}/audio-tours",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    ResponseEntity<AudioTourDto> createAudioTourForInstitution(
        @Parameter(name = "institution_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("institution_id") UUID institutionId,
        @Parameter(name = "AudioTourCreate", description = "", required = true) @Valid @RequestBody AudioTourCreate audioTourCreate
    );


    /**
     * POST /institutions : Создать новое учреждение
     * Администратор платформы создает новое учреждение.
     *
     * @param institutionCreate  (required)
     * @return Учреждение успешно создано. (status code 201)
     *         or Доступ запрещен. (status code 403)
     */
    @Operation(
        operationId = "createInstitution",
        summary = "Создать новое учреждение",
        description = "Администратор платформы создает новое учреждение.",
        tags = { "Institutions" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Учреждение успешно создано.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InstitutionDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = InstitutionDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MyError.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = MyError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/institutions",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    ResponseEntity<InstitutionDto> createInstitution(
        @Parameter(name = "InstitutionCreate", description = "", required = true) @Valid @RequestBody InstitutionCreate institutionCreate
    );


    /**
     * DELETE /institutions/{institution_id} : Удалить учреждение
     * Администратор платформы удаляет учреждение.
     *
     * @param institutionId  (required)
     * @return Учреждение успешно удалено. (status code 204)
     *         or Доступ запрещен. (status code 403)
     *         or Конфликт. Нельзя удалить учреждение, у которого есть экскурсии. (status code 409)
     */
    @Operation(
        operationId = "deleteInstitution",
        summary = "Удалить учреждение",
        description = "Администратор платформы удаляет учреждение.",
        tags = { "Institutions" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Учреждение успешно удалено."),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен.", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = MyError.class))
            }),
            @ApiResponse(responseCode = "409", description = "Конфликт. Нельзя удалить учреждение, у которого есть экскурсии.", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = MyError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/institutions/{institution_id}",
        produces = { "application/problem+json" }
    )
    ResponseEntity<Void> deleteInstitution(
        @Parameter(name = "institution_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("institution_id") UUID institutionId
    );


    /**
     * DELETE /institutions/{institution_id}/audio-tours/{tour_id} : Удалить аудиоэкскурсию
     * Администратор учреждения удаляет свою экскурсию.
     *
     * @param institutionId  (required)
     * @param tourId  (required)
     * @return Экскурсия успешно удалена. (status code 204)
     *         or Доступ запрещен. (status code 403)
     */
    @Operation(
        operationId = "deleteNestedAudioTour",
        summary = "Удалить аудиоэкскурсию",
        description = "Администратор учреждения удаляет свою экскурсию.",
        tags = { "Audio Tours" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Экскурсия успешно удалена."),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен.", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = MyError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/institutions/{institution_id}/audio-tours/{tour_id}",
        produces = { "application/problem+json" }
    )
    ResponseEntity<Void> deleteNestedAudioTour(
        @Parameter(name = "institution_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("institution_id") UUID institutionId,
        @Parameter(name = "tour_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tour_id") UUID tourId
    );


    /**
     * GET /institutions/{institution_id} : Получить информацию об учреждении
     * Возвращает детальную информацию о конкретном учреждении.
     *
     * @param institutionId  (required)
     * @return Детальная информация об учреждении. (status code 200)
     *         or Учреждение не найдено. (status code 404)
     */
    @Operation(
        operationId = "getInstitutionById",
        summary = "Получить информацию об учреждении",
        description = "Возвращает детальную информацию о конкретном учреждении.",
        tags = { "Institutions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Детальная информация об учреждении.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InstitutionDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = InstitutionDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Учреждение не найдено.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MyError.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = MyError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/institutions/{institution_id}",
        produces = { "application/json", "application/problem+json" }
    )
    ResponseEntity<InstitutionDto> getInstitutionById(
        @Parameter(name = "institution_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("institution_id") UUID institutionId
    );


    /**
     * GET /institutions/{institution_id}/audio-tours/{tour_id} : Получить детальную информацию об аудиоэкскурсии
     * Возвращает полную информацию о конкретной аудиоэкскурсии.
     *
     * @param institutionId  (required)
     * @param tourId  (required)
     * @return Детальная информация об экскурсии. (status code 200)
     *         or Учреждение или экскурсия не найдены. (status code 404)
     */
    @Operation(
        operationId = "getNestedAudioTourById",
        summary = "Получить детальную информацию об аудиоэкскурсии",
        description = "Возвращает полную информацию о конкретной аудиоэкскурсии.",
        tags = { "Audio Tours" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Детальная информация об экскурсии.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AudioTourDetails.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = AudioTourDetails.class))
            }),
            @ApiResponse(responseCode = "404", description = "Учреждение или экскурсия не найдены.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MyError.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = MyError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/institutions/{institution_id}/audio-tours/{tour_id}",
        produces = { "application/json", "application/problem+json" }
    )
    ResponseEntity<AudioTourDetails> getNestedAudioTourById(
        @Parameter(name = "institution_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("institution_id") UUID institutionId,
        @Parameter(name = "tour_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tour_id") UUID tourId
    );


    /**
     * GET /institutions/{institution_id}/audio-tours : Получить список экскурсий учреждения
     * Возвращает список всех аудиоэкскурсий, созданных указанным учреждением.
     *
     * @param institutionId  (required)
     * @param page Номер страницы (начиная с 1). (optional, default to 1)
     * @param size Количество элементов на странице. (optional, default to 20)
     * @return Список экскурсий учреждения. (status code 200)
     *         or Учреждение не найдено. (status code 404)
     */
    @Operation(
        operationId = "listInstitutionTours",
        summary = "Получить список экскурсий учреждения",
        description = "Возвращает список всех аудиоэкскурсий, созданных указанным учреждением.",
        tags = { "Audio Tours" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Список экскурсий учреждения.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaginatedAudioTours.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = PaginatedAudioTours.class))
            }),
            @ApiResponse(responseCode = "404", description = "Учреждение не найдено.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MyError.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = MyError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/institutions/{institution_id}/audio-tours",
        produces = { "application/json", "application/problem+json" }
    )
    ResponseEntity<PaginatedAudioTours> listInstitutionTours(
        @Parameter(name = "institution_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("institution_id") UUID institutionId,
        @Min(1) @Parameter(name = "page", description = "Номер страницы (начиная с 1).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
        @Max(100) @Parameter(name = "size", description = "Количество элементов на странице.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size
    );


    /**
     * GET /institutions : Получить список учреждений
     * Возвращает публичный список всех учреждений.
     *
     * @param page Номер страницы (начиная с 1). (optional, default to 1)
     * @param size Количество элементов на странице. (optional, default to 20)
     * @return Список учреждений. (status code 200)
     */
    @Operation(
        operationId = "listInstitutions",
        summary = "Получить список учреждений",
        description = "Возвращает публичный список всех учреждений.",
        tags = { "Institutions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Список учреждений.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaginatedInstitutions.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/institutions",
        produces = { "application/json" }
    )
    ResponseEntity<PaginatedInstitutions> listInstitutions(
        @Min(1) @Parameter(name = "page", description = "Номер страницы (начиная с 1).", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
        @Max(100) @Parameter(name = "size", description = "Количество элементов на странице.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size
    );


    /**
     * PATCH /institutions/{institution_id}/audio-tours/{tour_id} : Обновить аудиоэкскурсию
     * Администратор учреждения обновляет данные своей экскурсии.
     *
     * @param institutionId  (required)
     * @param tourId  (required)
     * @param audioTourUpdate  (required)
     * @return Экскурсия успешно обновлена. (status code 200)
     *         or Доступ запрещен. (status code 403)
     */
    @Operation(
        operationId = "updateNestedAudioTour",
        summary = "Обновить аудиоэкскурсию",
        description = "Администратор учреждения обновляет данные своей экскурсии.",
        tags = { "Audio Tours" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Экскурсия успешно обновлена.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AudioTourDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = AudioTourDto.class))
            }),
            @ApiResponse(responseCode = "403", description = "Доступ запрещен.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MyError.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = MyError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/institutions/{institution_id}/audio-tours/{tour_id}",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    ResponseEntity<AudioTourDto> updateNestedAudioTour(
        @Parameter(name = "institution_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("institution_id") UUID institutionId,
        @Parameter(name = "tour_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tour_id") UUID tourId,
        @Parameter(name = "AudioTourUpdate", description = "", required = true) @Valid @RequestBody AudioTourUpdate audioTourUpdate
    );

}
