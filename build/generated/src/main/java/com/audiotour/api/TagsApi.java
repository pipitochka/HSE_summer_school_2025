/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.audiotour.api;

import com.audiotour.dto.CreateTagRequest;
import com.audiotour.dto.ListTags200Response;
import com.audiotour.dto.MyError;
import com.audiotour.dto.TagDto;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-07-10T12:35:57.113105+03:00[Europe/Moscow]")
@Validated
@Tag(name = "Taxonomy", description = "Управление тегами")
public interface TagsApi {

    /**
     * POST /tags : Создать новый тег
     *
     * @param createTagRequest  (required)
     * @return Тег успешно создан. (status code 201)
     */
    @Operation(
        operationId = "createTag",
        summary = "Создать новый тег",
        tags = { "Taxonomy" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Тег успешно создан.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TagDto.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/tags",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<TagDto> createTag(
        @Parameter(name = "CreateTagRequest", description = "", required = true) @Valid @RequestBody CreateTagRequest createTagRequest
    );


    /**
     * DELETE /tags/{tag_id} : Удалить тег
     * Администратор платформы удаляет тег.
     *
     * @param tagId  (required)
     * @return Тег успешно удален. (status code 204)
     *         or Конфликт. Тег используется и не может быть удален. (status code 409)
     */
    @Operation(
        operationId = "deleteTag",
        summary = "Удалить тег",
        description = "Администратор платформы удаляет тег.",
        tags = { "Taxonomy" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Тег успешно удален."),
            @ApiResponse(responseCode = "409", description = "Конфликт. Тег используется и не может быть удален.", content = {
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = MyError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/tags/{tag_id}",
        produces = { "application/problem+json" }
    )
    ResponseEntity<Void> deleteTag(
        @Parameter(name = "tag_id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("tag_id") UUID tagId
    );


    /**
     * GET /tags : Получить список тегов
     *
     * @return Список тегов. (status code 200)
     */
    @Operation(
        operationId = "listTags",
        summary = "Получить список тегов",
        tags = { "Taxonomy" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Список тегов.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListTags200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tags",
        produces = { "application/json" }
    )
    ResponseEntity<ListTags200Response> listTags(
        
    );

}
